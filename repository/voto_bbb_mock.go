// Code generated by MockGen. DO NOT EDIT.
// Source: ./voto_bbb.go

// Package repository is a generated GoMock package.
package repository

import (
	reflect "reflect"

	model "github.com/felipecveiga/bbb/model"
	gomock "go.uber.org/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// CreateVoteFromDB mocks base method.
func (m *MockRepository) CreateVoteFromDB(vote *model.HistoricoVoto) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateVoteFromDB", vote)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateVoteFromDB indicates an expected call of CreateVoteFromDB.
func (mr *MockRepositoryMockRecorder) CreateVoteFromDB(vote interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVoteFromDB", reflect.TypeOf((*MockRepository)(nil).CreateVoteFromDB), vote)
}

// GetAllVotesFromDB mocks base method.
func (m *MockRepository) GetAllVotesFromDB() (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllVotesFromDB")
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllVotesFromDB indicates an expected call of GetAllVotesFromDB.
func (mr *MockRepositoryMockRecorder) GetAllVotesFromDB() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllVotesFromDB", reflect.TypeOf((*MockRepository)(nil).GetAllVotesFromDB))
}

// GetAllVotesHourFromDB mocks base method.
func (m *MockRepository) GetAllVotesHourFromDB() (map[string]int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllVotesHourFromDB")
	ret0, _ := ret[0].(map[string]int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllVotesHourFromDB indicates an expected call of GetAllVotesHourFromDB.
func (mr *MockRepositoryMockRecorder) GetAllVotesHourFromDB() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllVotesHourFromDB", reflect.TypeOf((*MockRepository)(nil).GetAllVotesHourFromDB))
}

// GetParticipantFomDB mocks base method.
func (m *MockRepository) GetParticipantFomDB(participantId int) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetParticipantFomDB", participantId)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetParticipantFomDB indicates an expected call of GetParticipantFomDB.
func (mr *MockRepositoryMockRecorder) GetParticipantFomDB(participantId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetParticipantFomDB", reflect.TypeOf((*MockRepository)(nil).GetParticipantFomDB), participantId)
}

// GetParticipantStatusFromDB mocks base method.
func (m *MockRepository) GetParticipantStatusFromDB(idParticipant int) (*model.Participante, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetParticipantStatusFromDB", idParticipant)
	ret0, _ := ret[0].(*model.Participante)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetParticipantStatusFromDB indicates an expected call of GetParticipantStatusFromDB.
func (mr *MockRepositoryMockRecorder) GetParticipantStatusFromDB(idParticipant interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetParticipantStatusFromDB", reflect.TypeOf((*MockRepository)(nil).GetParticipantStatusFromDB), idParticipant)
}

// GetVotesByIdFromDB mocks base method.
func (m *MockRepository) GetVotesByIdFromDB(participantId int) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVotesByIdFromDB", participantId)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVotesByIdFromDB indicates an expected call of GetVotesByIdFromDB.
func (mr *MockRepositoryMockRecorder) GetVotesByIdFromDB(participantId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVotesByIdFromDB", reflect.TypeOf((*MockRepository)(nil).GetVotesByIdFromDB), participantId)
}
