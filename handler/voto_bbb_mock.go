// Code generated by MockGen. DO NOT EDIT.
// Source: ./voto_bbb.go

// Package handler is a generated GoMock package.
package handler

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	echo "github.com/labstack/echo"
)

// MockHandler is a mock of Handler interface.
type MockHandler struct {
	ctrl     *gomock.Controller
	recorder *MockHandlerMockRecorder
}

// MockHandlerMockRecorder is the mock recorder for MockHandler.
type MockHandlerMockRecorder struct {
	mock *MockHandler
}

// NewMockHandler creates a new mock instance.
func NewMockHandler(ctrl *gomock.Controller) *MockHandler {
	mock := &MockHandler{ctrl: ctrl}
	mock.recorder = &MockHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHandler) EXPECT() *MockHandlerMockRecorder {
	return m.recorder
}

// GetParticipantVotes mocks base method.
func (m *MockHandler) GetParticipantVotes(c echo.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetParticipantVotes", c)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetParticipantVotes indicates an expected call of GetParticipantVotes.
func (mr *MockHandlerMockRecorder) GetParticipantVotes(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetParticipantVotes", reflect.TypeOf((*MockHandler)(nil).GetParticipantVotes), c)
}

// GetTotalVotes mocks base method.
func (m *MockHandler) GetTotalVotes(c echo.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTotalVotes", c)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetTotalVotes indicates an expected call of GetTotalVotes.
func (mr *MockHandlerMockRecorder) GetTotalVotes(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTotalVotes", reflect.TypeOf((*MockHandler)(nil).GetTotalVotes), c)
}

// GetVotesHour mocks base method.
func (m *MockHandler) GetVotesHour(c echo.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVotesHour", c)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetVotesHour indicates an expected call of GetVotesHour.
func (mr *MockHandlerMockRecorder) GetVotesHour(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVotesHour", reflect.TypeOf((*MockHandler)(nil).GetVotesHour), c)
}

// Vote mocks base method.
func (m *MockHandler) Vote(c echo.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Vote", c)
	ret0, _ := ret[0].(error)
	return ret0
}

// Vote indicates an expected call of Vote.
func (mr *MockHandlerMockRecorder) Vote(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Vote", reflect.TypeOf((*MockHandler)(nil).Vote), c)
}
