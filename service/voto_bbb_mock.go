// Code generated by MockGen. DO NOT EDIT.
// Source: ./voto_bbb.go

// Package service is a generated GoMock package.
package service

import (
	reflect "reflect"

	model "github.com/felipecveiga/bbb/model"
	gomock "go.uber.org/mock/gomock"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// CreateVote mocks base method.
func (m *MockService) CreateVote(voto *model.HistoricoVoto) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateVote", voto)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateVote indicates an expected call of CreateVote.
func (mr *MockServiceMockRecorder) CreateVote(voto interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVote", reflect.TypeOf((*MockService)(nil).CreateVote), voto)
}

// GetAllVotes mocks base method.
func (m *MockService) GetAllVotes() (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllVotes")
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllVotes indicates an expected call of GetAllVotes.
func (mr *MockServiceMockRecorder) GetAllVotes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllVotes", reflect.TypeOf((*MockService)(nil).GetAllVotes))
}

// GetVote mocks base method.
func (m *MockService) GetVote(participanteId int) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVote", participanteId)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVote indicates an expected call of GetVote.
func (mr *MockServiceMockRecorder) GetVote(participanteId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVote", reflect.TypeOf((*MockService)(nil).GetVote), participanteId)
}

// GetVoteHour mocks base method.
func (m *MockService) GetVoteHour() (map[string]int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVoteHour")
	ret0, _ := ret[0].(map[string]int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVoteHour indicates an expected call of GetVoteHour.
func (mr *MockServiceMockRecorder) GetVoteHour() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVoteHour", reflect.TypeOf((*MockService)(nil).GetVoteHour))
}
